{"version":3,"sources":["../scripts/firebase.js"],"names":["window","friendlyPix","Firebase","POSTS_PAGE_SIZE","USER_PAGE_POSTS_PAGE_SIZE","COMMENTS_PAGE_SIZE","constructor","database","firebase","storage","auth","firebaseRefs","cancelAllSubscriptions","forEach","ref","off","subscribeToComments","postId","callback","latestCommentId","_subscribeToFeed","getComments","_getPaginatedFeed","subscribeToGeneralFeed","latestPostId","getPosts","subscribeToHomeFeed","currentUser","uid","getHomeFeedPosts","subscribeToUserFeed","getUserFeedPosts","uri","latestEntryId","fetchPostDetails","feedRef","orderByKey","startAt","on","feedData","key","val","once","then","postData","push","pageSize","earliestEntryId","console","log","endAt","limitToLast","data","entries","nextPage","entryIds","Object","keys","length","nextPageStartingId","shift","queries","map","getPostData","Promise","all","results","deleteOps","result","deleteFromFeed","startHomeFeedLiveUpdaters","followingRef","followingData","followedUid","followedUserPostsRef","String","updates","update","followedUserId","updateHomeFeeds","following","updateOperations","lastSyncedPostId","searchUsers","searchString","maxResults","latinize","toLowerCase","query","orderByChild","limitToFirst","reversedQuery","people","userIds","userId","name","_search_index","full_name","reversedName","reversed_full_name","startsWith","saveUserData","imageUrl","displayName","searchFullName","searchReversedFullName","split","reverse","join","e","error","updateData","profile_picture","registerToUserLike","likesRef","updateLike","value","set","ServerValue","TIMESTAMP","addComment","commentText","commentObject","text","timestamp","Date","now","author","photoURL","uploadNewPic","pic","thumb","fileName","picRef","metadata","contentType","type","picUploadTask","put","snapshot","totalBytes","url","downloadURLs","catch","thumbRef","tumbUploadTask","urls","newPostKey","full_url","thumb_url","full_storage_uri","toString","thumb_storage_uri","toggleFollowUser","follow","lastPostId","post","registerToFollowStatusUpdate","followStatusRef","loadUserProfile","registerForLikesCount","likesCallback","numChildren","registerForCommentsCount","commentsCallback","commentsRef","registerForFollowersCount","followersCallback","followersRef","registerForFollowingCount","followingCallback","getFollowingProfiles","followingUids","fetchProfileDetailsOperations","followingUid","profiles","registerForPostsCount","postsCallback","userPostsRef","deletePost","picStorageUri","thumbStorageUri","updateObj","deleteFromDatabase","deletePicFromStorage","refFromURL","delete","deleteThumbFromStorage","remove","registerForPostsDeletion","deletionCallback","postsRef"],"mappings":"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","file":"firebase.js","sourcesContent":["/**\n * Copyright 2016 Abhinav Thomas. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nwindow.friendlyPix = window.friendlyPix || {};\n\n\n/**\n * Handles all Firebase interactions.\n */\nfriendlyPix.Firebase = class {\n  /**\n   * Number of posts loaded initially and per page for the feeds.\n   * @return {number}\n   */\n  static get POSTS_PAGE_SIZE() {\n    return 5;\n  }\n\n  /**\n   * Number of posts loaded initially and per page for the User Profile page.\n   * @return {number}\n   */\n  static get USER_PAGE_POSTS_PAGE_SIZE() {\n    return 6;\n  }\n\n  /**\n   * Number of posts comments loaded initially and per page.\n   * @return {number}\n   */\n  static get COMMENTS_PAGE_SIZE() {\n    return 3;\n  }\n\n  /**\n   * Initializes this Firebase facade.\n   * @constructor\n   */\n  constructor() {\n    // Firebase SDK.\n    this.database = firebase.database();\n    this.storage = firebase.storage();\n    this.auth = firebase.auth();\n\n    // Firebase references that are listened to.\n    this.firebaseRefs = [];\n\n    // var count =  this.database.ref('pc').child('count');\n    // console.log(count.$count);\n    // document.getElementById('prayerno').innerHTML = 'There has been '+count+' prayers';\n  }\n\n  /**\n   * Turns off all Firebase listeners.\n   */\n  cancelAllSubscriptions() {\n    this.firebaseRefs.forEach(ref => ref.off());\n    this.firebaseRefs = [];\n  }\n\n  /**\n   * Subscribes to receive updates from a post's comments. The given `callback` function gets\n   * called for each new comment to the post with ID `postId`.\n   *\n   * If provided we'll only listen to comments that were posted after `latestCommentId`.\n   */\n  subscribeToComments(postId, callback, latestCommentId) {\n    return this._subscribeToFeed(`/comments/${postId}`, callback, latestCommentId, false);\n  }\n\n  /**\n   * Paginates comments from the post with ID `postId`.\n   *\n   * Fetches a page of `COMMENTS_PAGE_SIZE` comments from the post.\n   *\n   * We return a `Promise` which resolves with an Map of comments and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getComments(postId) {\n    return this._getPaginatedFeed(`/comments/${postId}`,\n        friendlyPix.Firebase.COMMENTS_PAGE_SIZE, null, false);\n  }\n\n  /**\n   * Subscribes to receive updates to the general posts feed. The given `callback` function gets\n   * called for each new post to the general post feed.\n   *\n   * If provided we'll only listen to posts that were posted after `latestPostId`.\n   */\n  subscribeToGeneralFeed(callback, latestPostId) {\n    return this._subscribeToFeed('/posts/', callback, latestPostId);\n  }\n\n  /**\n   * Paginates posts from the global post feed.\n   *\n   * Fetches a page of `POSTS_PAGE_SIZE` posts from the global feed.\n   *\n   * We return a `Promise` which resolves with an Map of posts and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getPosts() {\n    return this._getPaginatedFeed('/posts/', friendlyPix.Firebase.POSTS_PAGE_SIZE);\n  }\n\n  /**\n   * Subscribes to receive updates to the home feed. The given `callback` function gets called for\n   * each new post to the general post feed.\n   *\n   * If provided we'll only listen to posts that were posted after `latestPostId`.\n   */\n  subscribeToHomeFeed(callback, latestPostId) {\n    return this._subscribeToFeed(`/feed/${this.auth.currentUser.uid}`, callback, latestPostId,\n        true);\n  }\n\n  /**\n   * Paginates posts from the user's home feed.\n   *\n   * Fetches a page of `POSTS_PAGE_SIZE` posts from the user's home feed.\n   *\n   * We return a `Promise` which resolves with an Map of posts and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getHomeFeedPosts() {\n    return this._getPaginatedFeed(`/feed/${this.auth.currentUser.uid}`,\n        friendlyPix.Firebase.POSTS_PAGE_SIZE, null, true);\n  }\n\n  /**\n   * Subscribes to receive updates to the home feed. The given `callback` function gets called for\n   * each new post to the general post feed.\n   *\n   * If provided we'll only listen to posts that were posted after `latestPostId`.\n   */\n  subscribeToUserFeed(uid, callback, latestPostId) {\n    return this._subscribeToFeed(`/people/${uid}/posts`, callback,\n        latestPostId, true);\n  }\n\n  /**\n   * Paginates posts from the user's posts feed.\n   *\n   * Fetches a page of `USER_PAGE_POSTS_PAGE_SIZE` posts from the user's posts feed.\n   *\n   * We return a `Promise` which resolves with an Map of posts and a function to the next page or\n   * `null` if there is no next page.\n   */\n  getUserFeedPosts(uid) {\n    return this._getPaginatedFeed(`/people/${uid}/posts`,\n        friendlyPix.Firebase.USER_PAGE_POSTS_PAGE_SIZE, null, true);\n  }\n\n  /**\n   * Subscribes to receive updates to the given feed. The given `callback` function gets called\n   * for each new entry on the given feed.\n   *\n   * If provided we'll only listen to entries that were posted after `latestEntryId`. This allows to\n   * listen only for new feed entries after fetching existing entries using `_getPaginatedFeed()`.\n   *\n   * If needed the posts details can be fetched. This is useful for shallow post feeds.\n   * @private\n   */\n  _subscribeToFeed(uri, callback, latestEntryId = null, fetchPostDetails = false) {\n    // Load all posts information.\n    let feedRef = this.database.ref(uri);\n    if (latestEntryId) {\n      feedRef = feedRef.orderByKey().startAt(latestEntryId);\n    }\n    feedRef.on('child_added', feedData => {\n      if (feedData.key !== latestEntryId) {\n        if (!fetchPostDetails) {\n          callback(feedData.key, feedData.val());\n        } else {\n          this.database.ref(`/posts/${feedData.key}`).once('value').then(\n              postData => callback(postData.key, postData.val()));\n        }\n      }\n    });\n    this.firebaseRefs.push(feedRef);\n  }\n\n  /**\n   * Paginates entries from the given feed.\n   *\n   * Fetches a page of `pageSize` entries from the given feed.\n   *\n   * If provided we'll return entries that were posted before (and including) `earliestEntryId`.\n   *\n   * We return a `Promise` which resolves with an Map of entries and a function to the next page or\n   * `null` if there is no next page.\n   *\n   * If needed the posts details can be fetched. This is useful for shallow post feeds like the user\n   * home feed and the user post feed.\n   * @private\n   */\n  _getPaginatedFeed(uri, pageSize, earliestEntryId = null, fetchPostDetails = false) {\n    console.log('Fetching entries from', uri, 'start at', earliestEntryId, 'page size', pageSize);\n    let ref = this.database.ref(uri);\n    if (earliestEntryId) {\n      ref = ref.orderByKey().endAt(earliestEntryId);\n    }\n    // We're fetching an additional item as a cheap way to test if there is a next page.\n    return ref.limitToLast(pageSize + 1).once('value').then(data => {\n      const entries = data.val() || {};\n\n      // Figure out if there is a next page.\n      let nextPage = null;\n      const entryIds = Object.keys(entries);\n      if (entryIds.length > pageSize) {\n        delete entries[entryIds[0]];\n        const nextPageStartingId = entryIds.shift();\n        nextPage = () => this._getPaginatedFeed(\n            uri, pageSize, nextPageStartingId, fetchPostDetails);\n      }\n      if (fetchPostDetails) {\n        // Fetch details of all posts.\n        const queries = entryIds.map(postId => this.getPostData(postId));\n        // Since all the requests are being done one the same feed it's unlikely that a single one\n        // would fail and not the others so using Promise.all() is not so risky.\n        return Promise.all(queries).then(results => {\n          const deleteOps = [];\n          results.forEach(result => {\n            if (result.val()) {\n              entries[result.key] = result.val();\n            } else {\n              // We encountered a deleted post. Removing permanently from the feed.\n              delete entries[result.key];\n              deleteOps.push(this.deleteFromFeed(uri, result.key));\n            }\n          });\n          if (deleteOps.length > 0) {\n            // We had to remove some deleted posts from the feed. Lets run the query again to get\n            // the correct number of posts.\n            return this._getPaginatedFeed(uri, pageSize, earliestEntryId, fetchPostDetails);\n          }\n          return {entries: entries, nextPage: nextPage};\n        });\n      }\n      return {entries: entries, nextPage: nextPage};\n    });\n  }\n\n  /**\n   * Keeps the home feed populated with latest followed users' posts live.\n   */\n  startHomeFeedLiveUpdaters() {\n    // Make sure we listen on each followed people's posts.\n    const followingRef = this.database.ref(`/people/${this.auth.currentUser.uid}/following`);\n    this.firebaseRefs.push(followingRef);\n    followingRef.on('child_added', followingData => {\n      // Start listening the followed user's posts to populate the home feed.\n      const followedUid = followingData.key;\n      let followedUserPostsRef = this.database.ref(`/people/${followedUid}/posts`);\n      if (followingData.val() instanceof String) {\n        followedUserPostsRef = followedUserPostsRef.orderByKey().startAt(followingData.val());\n      }\n      this.firebaseRefs.push(followedUserPostsRef);\n      followedUserPostsRef.on('child_added', postData => {\n        if (postData.key !== followingData.val()) {\n          const updates = {};\n          updates[`/feed/${this.auth.currentUser.uid}/${postData.key}`] = true;\n          updates[`/people/${this.auth.currentUser.uid}/following/${followedUid}`] = postData.key;\n          this.database.ref().update(updates);\n        }\n      });\n    });\n    // Stop listening to users we unfollow.\n    followingRef.on('child_removed', followingData => {\n      // Stop listening the followed user's posts to populate the home feed.\n      const followedUserId = followingData.key;\n      this.database.ref(`/people/${followedUserId}/posts`).off();\n    });\n  }\n\n  /**\n   * Updates the home feed with new followed users' posts and returns a promise once that's done.\n   */\n  updateHomeFeeds() {\n    // Make sure we listen on each followed people's posts.\n    const followingRef = this.database.ref(`/people/${this.auth.currentUser.uid}/following`);\n    return followingRef.once('value', followingData => {\n      // Start listening the followed user's posts to populate the home feed.\n      const following = followingData.val();\n      if (!following) {\n        return;\n      }\n      const updateOperations = Object.keys(following).map(followedUid => {\n        let followedUserPostsRef = this.database.ref(`/people/${followedUid}/posts`);\n        const lastSyncedPostId = following[followedUid];\n        if (lastSyncedPostId instanceof String) {\n          followedUserPostsRef = followedUserPostsRef.orderByKey().startAt(lastSyncedPostId);\n        }\n        return followedUserPostsRef.once('value', postData => {\n          const updates = {};\n          if (!postData.val()) {\n            return;\n          }\n          Object.keys(postData.val()).forEach(postId => {\n            if (postId !== lastSyncedPostId) {\n              updates[`/feed/${this.auth.currentUser.uid}/${postId}`] = true;\n              updates[`/people/${this.auth.currentUser.uid}/following/${followedUid}`] = postId;\n            }\n          });\n          return this.database.ref().update(updates);\n        });\n      });\n      return Promise.all(updateOperations);\n    });\n  }\n\n  /**\n   * Returns the users which name match the given search query as a Promise.\n   */\n  searchUsers(searchString, maxResults) {\n    searchString = latinize(searchString).toLowerCase();\n    const query = this.database.ref('/people')\n        .orderByChild('_search_index/full_name').startAt(searchString)\n        .limitToFirst(maxResults).once('value');\n    const reversedQuery = this.database.ref('/people')\n        .orderByChild('_search_index/reversed_full_name').startAt(searchString)\n        .limitToFirst(maxResults).once('value');\n    return Promise.all([query, reversedQuery]).then(results => {\n      const people = {};\n      // construct people from the two search queries results.\n      results.forEach(result => result.forEach(data => {\n        people[data.key] = data.val();\n      }));\n\n      // Remove results that do not start with the search query.\n      const userIds = Object.keys(people);\n      userIds.forEach(userId => {\n        const name = people[userId]._search_index.full_name;\n        const reversedName = people[userId]._search_index.reversed_full_name;\n        if (!name.startsWith(searchString) && !reversedName.startsWith(searchString)) {\n          delete people[userId];\n        }\n      });\n      return people;\n    });\n  }\n\n  /**\n   * Saves or updates public user data in Firebase (such as image URL, display name...).\n   */\n  saveUserData(imageUrl, displayName) {\n    if (!displayName) {\n      displayName = 'Anonymous';\n    }\n    let searchFullName = displayName.toLowerCase();\n    let searchReversedFullName = searchFullName.split(' ').reverse().join(' ');\n    try {\n      searchFullName = latinize(searchFullName);\n      searchReversedFullName = latinize(searchReversedFullName);\n    } catch (e) {\n      console.error(e);\n    }\n\n    const updateData = {\n      profile_picture: imageUrl,\n      full_name: displayName,\n      _search_index: {\n        full_name: searchFullName,\n        reversed_full_name: searchReversedFullName\n      }\n    };\n    return this.database.ref(`people/${this.auth.currentUser.uid}`).update(updateData);\n  }\n\n  /**\n   * Fetches a single post data.\n   */\n  getPostData(postId) {\n    return this.database.ref(`/posts/${postId}`).once('value');\n  }\n\n\n  /**\n   * Subscribe to receive updates on a user's post like status.\n   */\n  registerToUserLike(postId, callback) {\n    // Load and listen to new Likes.\n    const likesRef = this.database.ref(`likes/${postId}/${this.auth.currentUser.uid}`);\n    likesRef.on('value', data => callback(!!data.val()));\n    this.firebaseRefs.push(likesRef);\n  }\n  // registerForPrayerCount(postId, prayerCallback) {\n  //   const prayerRef = this.database.ref('pc').child('count');\n  //   prayerRef.on('value', data => prayerCallback(data));\n  //   this.firebaseRefs.push(prayerRef);\n                \n  // }\n\n  /**\n   * Updates the like status of a post from the current user.\n   */\n  updateLike(postId, value) {\n    return this.database.ref(`likes/${postId}/${this.auth.currentUser.uid}`)\n        .set(value ? firebase.database.ServerValue.TIMESTAMP : null);\n  }\n\n  /**\n   * Adds a comment to a post.\n   */\n  addComment(postId, commentText) {\n    const commentObject = {\n      text: commentText,\n      timestamp: Date.now(),\n      author: {\n        uid: this.auth.currentUser.uid,\n        full_name: this.auth.currentUser.displayName,\n        profile_picture: this.auth.currentUser.photoURL\n      }\n    };\n    return this.database.ref(`comments/${postId}`).push(commentObject);\n  }\n\n  /**\n   * Uploads a new Picture to Firebase Storage and adds a new post referencing it.\n   * This returns a Promise which completes with the new Post ID.\n   */\n  uploadNewPic(pic, thumb, fileName, text) {\n    // Start the pic file upload to Firebase Storage.\n    const picRef = this.storage.ref(`${this.auth.currentUser.uid}/full/${Date.now()}/${fileName}`);\n    const metadata = {\n      contentType: pic.type\n    };\n    var picUploadTask = picRef.put(pic, metadata).then(snapshot => {\n      console.log('New pic uploaded. Size:', snapshot.totalBytes, 'bytes.');\n      var url = snapshot.metadata.downloadURLs[0];\n      console.log('File available at', url);\n      return url;\n    }).catch(error => {\n      console.error('Error while uploading new pic', error);\n    });\n\n    // Start the thumb file upload to Firebase Storage.\n    const thumbRef = this.storage.ref(`${this.auth.currentUser.uid}/thumb/${Date.now()}/${fileName}`);\n    var tumbUploadTask = thumbRef.put(thumb, metadata).then(snapshot => {\n      console.log('New thumb uploaded. Size:', snapshot.totalBytes, 'bytes.');\n      var url = snapshot.metadata.downloadURLs[0];\n      console.log('File available at', url);\n      return url;\n    }).catch(error => {\n      console.error('Error while uploading new thumb', error);\n    });\n\n    return Promise.all([picUploadTask, tumbUploadTask]).then(urls => {\n      // Once both pics and thumbanils has been uploaded add a new post in the Firebase Database and\n      // to its fanned out posts lists (user's posts and home post).\n      const newPostKey = this.database.ref('/posts').push().key;\n      const update = {};\n      update[`/posts/${newPostKey}`] = {\n        full_url: urls[0],\n        thumb_url: urls[1],\n        text: text,\n        timestamp: firebase.database.ServerValue.TIMESTAMP,\n        full_storage_uri: picRef.toString(),\n        thumb_storage_uri: thumbRef.toString(),\n        author: {\n          uid: this.auth.currentUser.uid,\n          full_name: this.auth.currentUser.displayName,\n          profile_picture: this.auth.currentUser.photoURL\n        }\n      };\n      update[`/people/${this.auth.currentUser.uid}/posts/${newPostKey}`] = true;\n      update[`/feed/${this.auth.currentUser.uid}/${newPostKey}`] = true;\n      return this.database.ref().update(update).then(() => newPostKey);\n    });\n  }\n\n  /**\n   * Follow/Unfollow a user and return a promise once that's done.\n   *\n   * If the user is now followed we'll add all his posts to the home feed of the follower.\n   * If the user is now not followed anymore all his posts are removed from the follower home feed.\n   */\n  toggleFollowUser(followedUserId, follow) {\n    // Add or remove posts to the user's home feed.\n    return this.database.ref(`/people/${followedUserId}/posts`).once('value').then(\n        data => {\n          const updateData = {};\n          let lastPostId = true;\n\n          // Add followed user's posts to the home feed.\n          data.forEach(post => {\n            updateData[`/feed/${this.auth.currentUser.uid}/${post.key}`] = follow ? !!follow : null;\n            lastPostId = post.key;\n          });\n\n          // Add followed user to the 'following' list.\n          updateData[`/people/${this.auth.currentUser.uid}/following/${followedUserId}`] =\n              follow ? lastPostId : null;\n\n          // Add signed-in suer to the list of followers.\n          updateData[`/followers/${followedUserId}/${this.auth.currentUser.uid}`] =\n              follow ? !!follow : null;\n          return this.database.ref().update(updateData);\n        });\n  }\n\n  /**\n   * Listens to updates on the followed status of the given user.\n   */\n  registerToFollowStatusUpdate(userId, callback) {\n    const followStatusRef =\n        this.database.ref(`/people/${this.auth.currentUser.uid}/following/${userId}`);\n    followStatusRef.on('value', callback);\n    this.firebaseRefs.push(followStatusRef);\n  }\n\n  /**\n   * Load a single user profile information\n   */\n  loadUserProfile(uid) {\n    return this.database.ref(`/people/${uid}`).once('value');\n  }\n\n  /**\n   * Listens to updates on the likes of a post and calls the callback with likes counts.\n   * TODO: This won't scale if a user has a huge amount of likes. We need to keep track of a\n   *       likes count instead.\n   */\n  registerForLikesCount(postId, likesCallback) {\n    const likesRef = this.database.ref(`/likes/${postId}`);\n    likesRef.on('value', data => likesCallback(data.numChildren()));\n    this.firebaseRefs.push(likesRef);\n  }\n  \n  \n\n  /**\n   * Listens to updates on the comments of a post and calls the callback with comments counts.\n   */\n  registerForCommentsCount(postId, commentsCallback) {\n    const commentsRef = this.database.ref(`/comments/${postId}`);\n    commentsRef.on('value', data => commentsCallback(data.numChildren()));\n    this.firebaseRefs.push(commentsRef);\n  }\n\n  /**\n   * Listens to updates on the followers of a person and calls the callback with followers counts.\n   * TODO: This won't scale if a user has a huge amount of followers. We need to keep track of a\n   *       follower count instead.\n   */\n  registerForFollowersCount(uid, followersCallback) {\n    const followersRef = this.database.ref(`/followers/${uid}`);\n    followersRef.on('value', data => followersCallback(data.numChildren()));\n    this.firebaseRefs.push(followersRef);\n  }\n\n  /**\n   * Listens to updates on the followed people of a person and calls the callback with its count.\n   */\n  registerForFollowingCount(uid, followingCallback) {\n    const followingRef = this.database.ref(`/people/${uid}/following`);\n    followingRef.on('value', data => followingCallback(data.numChildren()));\n    this.firebaseRefs.push(followingRef);\n  }\n\n  /**\n   * Fetch the list of followed people's profile.\n   */\n  getFollowingProfiles(uid) {\n    return this.database.ref(`/people/${uid}/following`).once('value').then(data => {\n      if (data.val()) {\n        const followingUids = Object.keys(data.val());\n        const fetchProfileDetailsOperations = followingUids.map(\n          followingUid => this.loadUserProfile(followingUid));\n        return Promise.all(fetchProfileDetailsOperations).then(results => {\n          const profiles = {};\n          results.forEach(result => {\n            if (result.val()) {\n              profiles[result.key] = result.val();\n            }\n          });\n          return profiles;\n        });\n      }\n      return {};\n    });\n  }\n\n  /**\n   * Listens to updates on the user's posts and calls the callback with user posts counts.\n   */\n  registerForPostsCount(uid, postsCallback) {\n    const userPostsRef = this.database.ref(`/people/${uid}/posts`);\n    userPostsRef.on('value', data => postsCallback(data.numChildren()));\n    this.firebaseRefs.push(userPostsRef);\n  }\n\n  /**\n   * Deletes the given post from the global post feed and the user's post feed. Also deletes\n   * comments, likes and the file on Firebase Storage.\n   */\n  deletePost(postId, picStorageUri, thumbStorageUri) {\n    console.log(`Deleting ${postId}`);\n    const updateObj = {};\n    updateObj[`/people/${this.auth.currentUser.uid}/posts/${postId}`] = null;\n    updateObj[`/comments/${postId}`] = null;\n    updateObj[`/likes/${postId}`] = null;\n    updateObj[`/posts/${postId}`] = null;\n    updateObj[`/feed/${this.auth.currentUser.uid}/${postId}`] = null;\n    const deleteFromDatabase = this.database.ref().update(updateObj);\n    if (picStorageUri) {\n      const deletePicFromStorage = this.storage.refFromURL(picStorageUri).delete();\n      const deleteThumbFromStorage = this.storage.refFromURL(thumbStorageUri).delete();\n      return Promise.all([deleteFromDatabase, deletePicFromStorage, deleteThumbFromStorage]);\n    }\n    return deleteFromDatabase;\n  }\n\n  /**\n   * Deletes the given postId entry from the user's home feed.\n   */\n  deleteFromFeed(uri, postId) {\n    return this.database.ref(`${uri}/${postId}`).remove();\n  }\n\n  /**\n   * Listens to deletions on posts from the global feed.\n   */\n  registerForPostsDeletion(deletionCallback) {\n    const postsRef = this.database.ref(`/posts`);\n    postsRef.on('child_removed', data => deletionCallback(data.key));\n    this.firebaseRefs.push(postsRef);\n  }\n\n};\n\n\n\nfriendlyPix.firebase = new friendlyPix.Firebase();\n"]}