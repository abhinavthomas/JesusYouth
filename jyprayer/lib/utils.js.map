{"version":3,"sources":["../scripts/utils.js"],"names":["window","friendlyPix","MaterialUtils","refreshSwitchState","element","jQuery","MaterialSwitch","checkDisabled","checkToggleState","closeDrawer","drawerObfuscator","$","hasClass","click","clearTextField","value","parentElement","MaterialTextfield","boundUpdateClassesHandler","upgradeTextFields","componentHandler","upgradeElements","get","onEndScroll","offset","resolver","Deferred","mdlLayoutElement","scroll","innerHeight","scrollTop","prop","console","log","unbind","resolve","promise","stopOnEndScrolls"],"mappings":"AAAA;;;;;;;;;;;;;;GAeA,aAEAA,OAAOC,WAAP,CAAqBD,OAAOC,WAAP,EAAsB,EAA3C,CAEA;;GAGAA,YAAYC,aAAZ,CAA4B,KAAM,CAEhC;;KAGA,MAAOC,mBAAP,CAA0BC,OAA1B,CAAmC,CACjC,GAAIA,kBAAmBC,OAAvB,CAA+B,CAC7BD,QAAUA,QAAQ,CAAR,CACX,CACD,GAAIA,QAAQE,cAAZ,CAA4B,CAC1BF,QAAQE,cAAR,CAAuBC,aAAvB,GACAH,QAAQE,cAAR,CAAuBE,gBAAvB,EACD,CACF,CAED;;KAGA,MAAOC,YAAP,EAAqB,CACnB,KAAMC,kBAAmBC,EAAE,yBAAF,CAAzB,CACA,GAAID,iBAAiBE,QAAjB,CAA0B,YAA1B,CAAJ,CAA6C,CAC3CF,iBAAiBG,KAAjB,EACD,CACF,CAED;;KAGA,MAAOC,eAAP,CAAsBV,OAAtB,CAA+B,CAC7BA,QAAQW,KAAR,CAAgB,EAAhB,CACAX,QAAQY,aAAR,CAAsBC,iBAAtB,CAAwCC,yBAAxC,EACD,CAED;;KAGA,MAAOC,kBAAP,CAAyBf,OAAzB,CAAkC,CAChCgB,iBAAiBC,eAAjB,CAAiCV,EAAE,gBAAF,CAAoBP,OAApB,EAA6BkB,GAA7B,EAAjC,CACD,CAED;;;;;KAMA,MAAOC,YAAP,CAAmBC,OAAS,CAA5B,CAA+B,CAC7B,KAAMC,UAAW,GAAId,GAAEe,QAAvB,CACA,KAAMC,kBAAmBhB,EAAE,aAAF,CAAzB,CACAgB,iBAAiBC,MAAjB,CAAwB,IAAM,CAC5B,GAAK5B,OAAO6B,WAAP,CAAqBF,iBAAiBG,SAAjB,EAArB,CAAoDN,MAArD,EACAG,iBAAiBI,IAAjB,CAAsB,cAAtB,CADJ,CAC2C,CACzCC,QAAQC,GAAR,CAAY,qBAAZ,EACAN,iBAAiBO,MAAjB,CAAwB,QAAxB,EACAT,SAASU,OAAT,EACD,CACF,CAPD,EAQAH,QAAQC,GAAR,CAAY,8BAAZ,EACA,MAAOR,UAASW,OAAT,EACR,CAED;;KAGA,MAAOC,iBAAP,EAA0B,CACxB,KAAMV,kBAAmBhB,EAAE,aAAF,CAAzB,CACAgB,iBAAiBO,MAAjB,CAAwB,QAAxB,CACD,CAnE+B,CAAlC","file":"utils.js","sourcesContent":["/**\n * Copyright 2016 Abhinav Thomas. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nwindow.friendlyPix = window.friendlyPix || {};\n\n/**\n * Set of utilities to handle Material Design Lite elements.\n */\nfriendlyPix.MaterialUtils = class {\n\n  /**\n   * Refreshes the UI state of the given Material Design Checkbox / Switch element.\n   */\n  static refreshSwitchState(element) {\n    if (element instanceof jQuery) {\n      element = element[0];\n    }\n    if (element.MaterialSwitch) {\n      element.MaterialSwitch.checkDisabled();\n      element.MaterialSwitch.checkToggleState();\n    }\n  }\n\n  /**\n   * Closes the drawer if it is open.\n   */\n  static closeDrawer() {\n    const drawerObfuscator = $('.mdl-layout__obfuscator');\n    if (drawerObfuscator.hasClass('is-visible')) {\n      drawerObfuscator.click();\n    }\n  }\n\n  /**\n   * Clears the given Material Text Field.\n   */\n  static clearTextField(element) {\n    element.value = '';\n    element.parentElement.MaterialTextfield.boundUpdateClassesHandler();\n  }\n\n  /**\n   * Upgrades the text fields in the element.\n   */\n  static upgradeTextFields(element) {\n    componentHandler.upgradeElements($('.mdl-textfield', element).get());\n  }\n\n  /**\n   * Returns a Promise which resolves when the user has reached the bottom of the page while\n   * scrolling.\n   * If an `offset` is specified the promise will resolve before reaching the bottom of\n   * the page by the given amount offset in pixels.\n   */\n  static onEndScroll(offset = 0) {\n    const resolver = new $.Deferred();\n    const mdlLayoutElement = $('.mdl-layout');\n    mdlLayoutElement.scroll(() => {\n      if ((window.innerHeight + mdlLayoutElement.scrollTop() + offset) >=\n          mdlLayoutElement.prop('scrollHeight')) {\n        console.log('Scroll End Reached!');\n        mdlLayoutElement.unbind('scroll');\n        resolver.resolve();\n      }\n    });\n    console.log('Now watching for Scroll End.');\n    return resolver.promise();\n  }\n\n  /**\n   * Stops scroll listeners.\n   */\n  static stopOnEndScrolls() {\n    const mdlLayoutElement = $('.mdl-layout');\n    mdlLayoutElement.unbind('scroll');\n  }\n};\n"]}