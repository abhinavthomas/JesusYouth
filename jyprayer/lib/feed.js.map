{"version":3,"sources":["../scripts/feed.js"],"names":["window","friendlyPix","Feed","constructor","posts","newPosts","auth","firebase","$","document","ready","pageFeed","feedImageContainer","noPostsMessage","nextPageButton","newPostsButton","click","showNewPosts","addPosts","postIds","Object","keys","i","length","hide","postData","post","Post","push","postElement","fillPostData","thumb_url","url","text","author","timestamp","full_url","existingPostElement","replaceWith","append","addClass","toggleNextPageButton","nextPage","unbind","loadMorePosts","prop","console","log","then","data","entries","show","MaterialUtils","onEndScroll","postKeys","prepend","showGeneralFeed","clear","getPosts","latestPostId","subscribeToGeneralFeed","postId","postValue","addNewPost","registerForPostsDeletion","onPostDeleted","showHomeFeed","currentUser","updateHomeFeeds","getHomeFeedPosts","subscribeToHomeFeed","startHomeFeedLiveUpdaters","nbNewPosts","remove","stopOnEndScrolls","cancelAllSubscriptions","forEach","feed"],"mappings":"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","file":"feed.js","sourcesContent":["/**\n * Copyright 2015 Abhinav Thomas. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nwindow.friendlyPix = window.friendlyPix || {};\n\n/**\n * Handles the Home and Feed UI.\n */\nfriendlyPix.Feed = class {\n\n  /**\n   * Initializes the Friendly Pix feeds.\n   * @constructor\n   */\n  constructor() {\n    // List of all posts on the page.\n    this.posts = [];\n    // Map of posts that can be displayed.\n    this.newPosts = {};\n\n    // Firebase SDK.\n    this.auth = firebase.auth();\n\n    $(document).ready(() => {\n      // Pointers to DOM elements.\n      this.pageFeed = $('#page-feed');\n      this.feedImageContainer = $('.fp-image-container', this.pageFeed);\n      this.noPostsMessage = $('.fp-no-posts', this.pageFeed);\n      this.nextPageButton = $('.fp-next-page-button button');\n      this.newPostsButton = $('.fp-new-posts-button button');\n\n      // Event bindings.\n      this.newPostsButton.click(() => this.showNewPosts());\n    });\n  }\n\n  /**\n   * Appends the given list of `posts`.\n   */\n  addPosts(posts) {\n    // Displays the list of posts\n    const postIds = Object.keys(posts);\n    for (let i = postIds.length - 1; i >= 0; i--) {\n      this.noPostsMessage.hide();\n      const postData = posts[postIds[i]];\n      const post = new friendlyPix.Post();\n      this.posts.push(post);\n      const postElement = post.fillPostData(postIds[i], postData.thumb_url || postData.url,\n          postData.text, postData.author, postData.timestamp, null, null, postData.full_url);\n      // If a post with similar ID is already in the feed we replace it instead of appending.\n      const existingPostElement = $(`.fp-post-${postIds[i]}`, this.feedImageContainer);\n      if (existingPostElement.length) {\n        existingPostElement.replaceWith(postElement);\n      } else {\n        this.feedImageContainer.append(postElement.addClass(`fp-post-${postIds[i]}`));\n      }\n    }\n  }\n\n  /**\n   * Shows the \"load next page\" button and binds it the `nextPage` callback. If `nextPage` is `null`\n   * then the button is hidden.\n   */\n  toggleNextPageButton(nextPage) {\n    this.nextPageButton.unbind('click');\n    if (nextPage) {\n      const loadMorePosts = () => {\n        this.nextPageButton.prop('disabled', true);\n        console.log('Loading next page of posts.');\n        nextPage().then(data => {\n          this.addPosts(data.entries);\n          this.toggleNextPageButton(data.nextPage);\n        });\n      };\n      this.nextPageButton.show();\n      // Enable infinite Scroll.\n      friendlyPix.MaterialUtils.onEndScroll(100).then(loadMorePosts);\n      this.nextPageButton.prop('disabled', false);\n      this.nextPageButton.click(loadMorePosts);\n    } else {\n      this.nextPageButton.hide();\n    }\n  }\n\n  /**\n   * Prepends the list of new posts stored in `this.newPosts`. This happens when the user clicks on\n   * the \"Show new posts\" button.\n   */\n  showNewPosts() {\n    const newPosts = this.newPosts;\n    this.newPosts = {};\n    this.newPostsButton.hide();\n    const postKeys = Object.keys(newPosts);\n\n    for (let i = 0; i < postKeys.length; i++) {\n      this.noPostsMessage.hide();\n      const post = newPosts[postKeys[i]];\n      const postElement = new friendlyPix.Post();\n      this.posts.push(postElement);\n      this.feedImageContainer.prepend(postElement.fillPostData(postKeys[i], post.thumb_url ||\n          post.url, post.text, post.author, post.timestamp, null, null, post.full_url));\n    }\n  }\n\n  /**\n   * Displays the general posts feed.\n   */\n  showGeneralFeed() {\n    // Clear previously displayed posts if any.\n    this.clear();\n\n    // Load initial batch of posts.\n    friendlyPix.firebase.getPosts().then(data => {\n      // Listen for new posts.\n      const latestPostId = Object.keys(data.entries)[Object.keys(data.entries).length - 1];\n      friendlyPix.firebase.subscribeToGeneralFeed(\n          (postId, postValue) => this.addNewPost(postId, postValue), latestPostId);\n\n      // Adds fetched posts and next page button if necessary.\n      this.addPosts(data.entries);\n      this.toggleNextPageButton(data.nextPage);\n    });\n\n    // Listen for posts deletions.\n    friendlyPix.firebase.registerForPostsDeletion(postId => this.onPostDeleted(postId));\n  }\n\n  /**\n   * Shows the feed showing all followed users.\n   */\n  showHomeFeed() {\n    // Clear previously displayed posts if any.\n    this.clear();\n\n    if (this.auth.currentUser) {\n      // Make sure the home feed is updated with followed users's new posts.\n      friendlyPix.firebase.updateHomeFeeds().then(() => {\n        // Load initial batch of posts.\n        friendlyPix.firebase.getHomeFeedPosts().then(data => {\n          const postIds = Object.keys(data.entries);\n          if (postIds.length === 0) {\n            this.noPostsMessage.hide();\n          }\n          // Listen for new posts.\n          const latestPostId = postIds[postIds.length - 1];\n          friendlyPix.firebase.subscribeToHomeFeed(\n              (postId, postValue) => {\n                this.addNewPost(postId, postValue);\n              }, latestPostId);\n\n          // Adds fetched posts and next page button if necessary.\n          this.addPosts(data.entries);\n          this.toggleNextPageButton(data.nextPage);\n        });\n\n        // Add new posts from followers live.\n        friendlyPix.firebase.startHomeFeedLiveUpdaters();\n\n        // Listen for posts deletions.\n        friendlyPix.firebase.registerForPostsDeletion(postId => this.onPostDeleted(postId));\n      });\n    }\n  }\n\n  /**\n   * Triggered when a post has been deleted.\n   */\n  onPostDeleted(postId) {\n    // Potentially remove post from in-memory new post list.\n    if (this.newPosts[postId]) {\n      delete this.newPosts[postId];\n      const nbNewPosts = Object.keys(this.newPosts).length;\n      this.newPostsButton.text(`Display ${nbNewPosts} new posts`);\n      if (nbNewPosts === 0) {\n        this.newPostsButton.hide();\n      }\n    }\n\n    // Potentially delete from the UI.\n    $(`.fp-post-${postId}`, this.pageFeed).remove();\n  }\n\n  /**\n   * Adds a new post to display in the queue.\n   */\n  addNewPost(postId, postValue) {\n    this.newPosts[postId] = postValue;\n    this.newPostsButton.text(`Display ${Object.keys(this.newPosts).length} new posts`);\n    this.newPostsButton.show();\n  }\n\n  /**\n   * Clears the UI.\n   */\n  clear() {\n    // Delete the existing posts if any.\n    $('.fp-post', this.feedImageContainer).remove();\n\n    // Hides the \"next page\" and \"new posts\" buttons.\n    this.nextPageButton.hide();\n    this.newPostsButton.hide();\n\n    // Remove any click listener on the next page button.\n    this.nextPageButton.unbind('click');\n\n    // Stops then infinite scrolling listeners.\n    friendlyPix.MaterialUtils.stopOnEndScrolls();\n\n    // Clears the list of upcoming posts to display.\n    this.newPosts = {};\n\n    // Displays the help message for empty feeds.\n    this.noPostsMessage.hide();\n\n    // Remove Firebase listeners.\n    friendlyPix.firebase.cancelAllSubscriptions();\n\n    // Stops all timers if any.\n    this.posts.forEach(post => post.clear());\n    this.posts = [];\n  }\n};\n\nfriendlyPix.feed = new friendlyPix.Feed();\n"]}